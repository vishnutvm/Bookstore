<section  class="d-flex justify-content-center " >
  <div class=" container row  d-flex justify-content-center ">
    <div class="ml-5 col-md-6">
      <h2 class="text-center my-5 ">Edit Details</h2>
      <form id="editform" class="d-flex aling-item-center flex-column" action="/editProfile/{{userdata._id}}" method="post"    enctype="multipart/form-data" >
    <div class="form-outline ">
        <input id="username" type="text" name="name" class="form-control mb-3" placeholder="name"  value="{{userdata.name}}">

                    {{!-- form validation fald --}}

                    <i class="fas fa-check-circle"></i>
                    <i class="fas fa-exclamation-circle"></i>
                    <small>Error message</small>

                    {{!-- form validation ends --}}

</div>

   <div class="form-outline ">
        <input id="email" type="email" name="email" class="form-control mb-3" placeholder="email" required value="{{userdata.email}}">

                    {{!-- form validation fald --}}

                    <i class="fas fa-check-circle"></i>
                    <i class="fas fa-exclamation-circle"></i>
                    <small>Error message</small>

                    {{!-- form validation ends --}}
</div>

    <div class="form-outline ">
        <input id="phone" type="number" name="phone" class="form-control mb-3" placeholder="phone" required value="{{userdata.phone}}">


                    {{!-- form validation fald --}}

                    <i class="fas fa-check-circle"></i>
                    <i class="fas fa-exclamation-circle"></i>
                    <small>Error message</small>

                    {{!-- form validation ends --}}
</div>

        <textarea id="address" type="text" name="address" class="form-control mb-3"  placeholder="Discription" rows="3" >{{userdata.address}}</textarea>



        <button  style="background-color:#EF3772; color:#fff;" type="submit" class="btn mt-1" required>Submit</button>

      </form>
    </div>
  </div>
</section>


{{!-- form validations --}}
<script>


  const editform = document.getElementById("editform")
  const username = document.getElementById("username")
  const email = document.getElementById("email")
  const phone = document.getElementById("phone")


  editform.addEventListener("submit", (e) => {

    //checking input fealds
    checkInput()


    //chek if all the element valid or not
    let isSuccess = editform.querySelectorAll(".form-outline.success")
    let formoutline = editform.querySelectorAll(".form-outline")

    if (isSuccess) {
      //checking if all the elements have success class
      if (formoutline.length == isSuccess.length) {

      } else {
        e.preventDefault();
      }

    }




  })



  function checkInput() {
    //get values form input feald

    const usernameValue = username.value.trim()
    const emailValue = email.value.trim()
    const phoneValue = phone.value.trim()
    
console.log(phoneValue)
    //validating username
    if (usernameValue === '') {

      setErrorFor(username, 'Username connot be blank');
    } else {

      setSuccessFor(username)
    }
    // validation email

    if (emailValue === '') {
      setErrorFor(email, 'Email connot be blank');
    } else if (!isEmail(emailValue)) {
      setErrorFor(email, 'Email is not valid')
    } else {
      setSuccessFor(email)
    }

    //validating phone
    if (phoneValue === '') {
      setErrorFor(phone, 'Number connot be blank');
    } else if (isNaN(phoneValue) || phoneValue.length != 10) {
      setErrorFor(phone, 'Please enter a valid phone number');
    }
    else {
      setSuccessFor(phone)
    }

    //validating password

    if (passwordValue === '') {
      setErrorFor(password, 'Password cannot be blank');
    } else if(passwordValue.length < 8){
  setErrorFor(password, 'Password must be minimum 8 characters');
    }
    else{
      setSuccessFor(password);
    }


    //validating password2

    if (password2Value === '') {
      setErrorFor(password2, 'Password2 cannot be blank');
    } else if (passwordValue !== password2Value) {
      setErrorFor(password2, 'Passwords does not match');
    } else {
      setSuccessFor(password2);
    }

  }





  //setting error
  function setErrorFor(input, message) {
    const formoutline = input.parentElement;
    const small = formoutline.querySelector('small');
    small.innerText = message;
    formoutline.className = 'form-outline error'
  }


  //setting succress
  function setSuccessFor(input) {
    const formoutline = input.parentElement;
    formoutline.className = 'form-outline success'
  }



  // email validation
  function isEmail(email) {
    return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email);
  }


</script>
{{!-- form validations ends --}}